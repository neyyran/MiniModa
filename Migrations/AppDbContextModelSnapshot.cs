// <auto-generated />
using System;
using BabyClothesShop.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BabyClothesShop.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BabyClothesShop.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BabyClothesShop.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AgeGroup")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AgeGroup = "Yenidoğan",
                            Name = "Kız Bebek & Çocuk"
                        },
                        new
                        {
                            Id = 2,
                            AgeGroup = "0-6 Ay",
                            Name = "Kız Bebek & Çocuk"
                        },
                        new
                        {
                            Id = 3,
                            AgeGroup = "6-12 Ay",
                            Name = "Kız Bebek & Çocuk"
                        },
                        new
                        {
                            Id = 4,
                            AgeGroup = "12-24 Ay",
                            Name = "Kız Bebek & Çocuk"
                        },
                        new
                        {
                            Id = 5,
                            AgeGroup = "Yenidoğan",
                            Name = "Erkek Bebek & Çocuk"
                        },
                        new
                        {
                            Id = 6,
                            AgeGroup = "0-6 Ay",
                            Name = "Erkek Bebek & Çocuk"
                        },
                        new
                        {
                            Id = 7,
                            AgeGroup = "6-12 Ay",
                            Name = "Erkek Bebek & Çocuk"
                        },
                        new
                        {
                            Id = 8,
                            AgeGroup = "12-24 Ay",
                            Name = "Erkek Bebek & Çocuk"
                        });
                });

            modelBuilder.Entity("BabyClothesShop.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            ImageUrl = "https://i.ibb.co/HpC21JCg/yenidogan-kiz-bebek-zibin-seti-cicek-d-b5b6cd.jpg",
                            Name = "Çiçek Desenli Pembe Yenidoğan Kruvaze Takım",
                            Price = 350.90m
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            ImageUrl = "https://i.ibb.co/3Ym00mc7/yenidogan-kiz-bebek-zibin-seti-cicek-d-2b-4cc.jpg",
                            Name = "Çiçek Desenli Ekru Yenidoğan Kruvaze Takım",
                            Price = 350.99m
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            ImageUrl = "https://i.ibb.co/HLb7B3vb/yenidogan-zibin-seti-ay-baskili-krem-y-d-97a7.jpg",
                            Name = "Ay Baskılı Krem Yenidoğan Zıbın Kruvaze Takım",
                            Price = 350.90m
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            ImageUrl = "https://static.ticimax.cloud/cdn-cgi/image/width=568,quality=85/7179/uploads/urunresimleri/buyuk/yenidogan-patikli-tulum-zeytin-baskili-30-b58.jpg",
                            Name = "Zeytin Baskılı Yenidoğan Tulum",
                            Price = 280.90m
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            ImageUrl = "https://static.ticimax.cloud/cdn-cgi/image/width=568,quality=85/7179/uploads/urunresimleri/buyuk/100-pamuk-papatya-desenli-yazlik-bebek--a3c3-.jpg",
                            Name = "%100 Pamuklu Papatya Desenli Yazlık Bebek Tulum",
                            Price = 449.90m
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            ImageUrl = "https://static.ticimax.cloud/cdn-cgi/image/width=568,quality=85/7179/uploads/urunresimleri/buyuk/kiz-bebek-takimi-pembe-cicekli-firfirl-f05-61.jpg",
                            Name = "Pembe Çiçekli Fırfırlı Kız Bebek Alt Üst Takım",
                            Price = 279.90m
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 3,
                            ImageUrl = "https://static.ticimax.cloud/cdn-cgi/image/width=568,quality=85/7179/uploads/urunresimleri/buyuk/kiz-bebek-sortlu-takim-yazlik-tavsan-n-c18-48.jpg",
                            Name = "Kız Bebek Şortlu Takım – Yazlık Tavşan Nakışlı İkili Takım",
                            Price = 499.90m
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 3,
                            ImageUrl = "https://static.ticimax.cloud/cdn-cgi/image/width=568,quality=85/7179/uploads/urunresimleri/buyuk/papatya-baskili-tisort-ve-hardal-sortl-f4e47d.jpg",
                            Name = "Papatya Baskılı Tişört ve Hardal Şortlu Yazlık Bebek Takımı – 2'li Penye Set",
                            Price = 499.90m
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 3,
                            ImageUrl = "https://static.ticimax.cloud/cdn-cgi/image/width=568,quality=85/7179/uploads/urunresimleri/buyuk/kiz-bebek-takimi-pembe-3lu-figurlu-kap-a17dae.jpg",
                            Name = "Pembe 3'lü Figürlü Kapüşonlu Hırkalı Kız Bebek Takımı",
                            Price = 750.90m
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 4,
                            ImageUrl = "https://static.ticimax.cloud/cdn-cgi/image/width=568,quality=85/7179/uploads/urunresimleri/buyuk/kiz-bebek-sweat-takim-kolu-firfirli-sa-357-00.jpg",
                            Name = "Kız Bebek Sweat Takım Kolu Fırfırlı Şardonlu",
                            Price = 649.90m
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 4,
                            ImageUrl = "https://static.ticimax.cloud/cdn-cgi/image/width=568,quality=85/7179/uploads/urunresimleri/buyuk/turuncu-kiz-bebek-sweat-takimi-sardonl-6a-98c.jpg",
                            Name = "Turuncu Kız Bebek Sweat Takımı Şardonlu",
                            Price = 649.90m
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 4,
                            ImageUrl = "https://static.ticimax.cloud/cdn-cgi/image/width=568,quality=85/7179/uploads/urunresimleri/buyuk/kiz-bebek-sweat-pantolon-takimi-pembe--cfe417.jpg",
                            Name = "Kız Bebek Sweat Pantolon Takımı Pembe Bear Nakışlı",
                            Price = 629.90m
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 5,
                            ImageUrl = "https://static.ticimax.cloud/cdn-cgi/image/width=568,quality=85/7179/uploads/urunresimleri/buyuk/bebe-yaka-4lu-yenidogan-seti-erkek-beb-d4-4a8.jpeg",
                            Name = "Bebe Yaka 4'lü Yenidoğan Seti Erkek",
                            Price = 750.90m
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 5,
                            ImageUrl = "https://static.ticimax.cloud/cdn-cgi/image/width=568,quality=85/7179/uploads/urunresimleri/buyuk/krosatali-bebe-yaka-4lu-yenidogan-seti-58d595.jpeg",
                            Name = "Krosatalı Bebe Yaka 4'lü Yenidoğan Seti Erkek",
                            Price = 750.90m
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 5,
                            ImageUrl = "https://static.ticimax.cloud/cdn-cgi/image/width=568,quality=85/7179/uploads/urunresimleri/buyuk/fitilli-bebek-takimi-zeytin-baskili-kr-4-ebec.jpg",
                            Name = "Fitilli Bebek Takımı Zeytin Baskılı Krem",
                            Price = 350.90m
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 6,
                            ImageUrl = "https://static.ticimax.cloud/cdn-cgi/image/width=568,quality=85/7179/uploads/urunresimleri/buyuk/dgz-gri-mevsimlik-bebek-takimi-alt-ust-6a78-4.jpg",
                            Name = "Düz Mor Mevsimlik Bebek Takımı",
                            Price = 299.90m
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 6,
                            ImageUrl = "https://static.ticimax.cloud/cdn-cgi/image/width=568,quality=85/7179/uploads/urunresimleri/buyuk/erkek-bebek-cocuk-pijama-takimi-0-6-ya-06a-98.jpg",
                            Name = "Mavi Yıldızlı Erkek Bebek Pijama Takımı",
                            Price = 299.90m
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 7,
                            ImageUrl = "https://static.ticimax.cloud/cdn-cgi/image/width=568,quality=85/7179/uploads/urunresimleri/buyuk/100-pamuk-denizci-temali-erkek-bebek-y-3c8289.jpg",
                            Name = "%100 Pamuk Denizci Temalı Erkek Bebek Yazlık Tulum",
                            Price = 449.90m
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 7,
                            ImageUrl = "https://static.ticimax.cloud/cdn-cgi/image/width=568,quality=85/7179/uploads/urunresimleri/buyuk/bej-renk-bebek-yazlik-kisa-kollu-tulum-5-9f4c.jpg",
                            Name = "Bej Renk Bebek Yazlık Kısa Kollu Tulum",
                            Price = 449.90m
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 7,
                            ImageUrl = "https://static.ticimax.cloud/cdn-cgi/image/width=568,quality=85/7179/uploads/urunresimleri/buyuk/erkek-bebek-salopet-tsihrt-kaplan-dese-5-470b.jpg",
                            Name = "Erkek Bebek Salopet Tişört Kaplan Desenli",
                            Price = 449.90m
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = 8,
                            ImageUrl = "https://static.ticimax.cloud/cdn-cgi/image/width=568,quality=85/7179/uploads/urunresimleri/buyuk/fume-kapusonlu-3lu-bebek-takimi-hirkal-177-8d.jpg",
                            Name = "Füme Kapüşonlu 3'lü Bebek Takımı",
                            Price = 949.90m
                        },
                        new
                        {
                            Id = 22,
                            CategoryId = 8,
                            ImageUrl = "https://static.ticimax.cloud/cdn-cgi/image/width=568,quality=85/7179/uploads/urunresimleri/buyuk/erkek-bebek-sweat-takim-sardonlu-kamyo-f1-46e.jpg",
                            Name = "Sweat Takım Şardonlu Kamyon Nakışlı Bebek Takımı",
                            Price = 629.90m
                        },
                        new
                        {
                            Id = 23,
                            CategoryId = 8,
                            ImageUrl = "https://static.ticimax.cloud/cdn-cgi/image/width=568,quality=85/7179/uploads/urunresimleri/buyuk/dino-mavi-sardonlu-cocuk-takim-2-6-yas-71cec2.jpg",
                            Name = "Dino Mavi Şardonlu Çocuk Takım",
                            Price = 629.90m
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MiniModa.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("BabyClothesShop.Models.Product", b =>
                {
                    b.HasOne("BabyClothesShop.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BabyClothesShop.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BabyClothesShop.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BabyClothesShop.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BabyClothesShop.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MiniModa.Models.CartItem", b =>
                {
                    b.HasOne("BabyClothesShop.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BabyClothesShop.Models.Category", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
